//
//  PremiumDataMarketplaceViewController.swift
//  stonks
//
//  Created by Samuel Hobel on 5/25/22.
//  Copyright Â© 2022 Samuel Hobel. All rights reserved.
//

import UIKit
import FCAlertView

struct PremiumDataWrapper {
    var package:PremiumPackage?
    var logoImageName:String?
    var promoImageName:String?
    var purchaseDate:String?
    var description:String?
}

class PremiumDataMarketplaceViewController: UIViewController, UITableViewDelegate, UITableViewDataSource, ShadowButtonDelegate, UISearchBarDelegate, LoadingProtocol {

    @IBOutlet var mainView: UIView!
    @IBOutlet weak var searchbar: UISearchBar!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var symbolsTableView: UITableView!
    @IBOutlet weak var goToSymbolButton: UIButton!
    @IBOutlet weak var selectAStock: UILabel!
    @IBOutlet weak var creditBalance: ShadowButtonView!
    @IBOutlet weak var loader: UIActivityIndicatorView!
    
    private var searchResults:[Company] = []
    var data:[PremiumDataWrapper] = []
    var symbols:[Company] = []
    var company:Company?
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.mainView.addPurpleGradientBackground()
        self.loader.startAnimating()
        
        self.tableView.isHidden = true
        self.selectAStock.isHidden = false
        self.goToSymbolButton.isHidden = true
        
        self.tableView.delegate = self
        self.tableView.dataSource = self
        self.symbolsTableView.delegate = self
        self.symbolsTableView.dataSource = self
        self.symbolsTableView.backgroundColor = .clear
        self.symbolsTableView.tableHeaderView = nil;

        self.searchbar.delegate = self
        
        self.creditBalance.delegate = self
        self.creditBalance.bgColor = .clear
        self.creditBalance.credits.text = String(Dataholder.getCreditBalance())
        Dataholder.subscribeForCreditBalanceUpdates(self)
        
        //gets the cost of the different premium packages
        NetworkManager.getMyRestApi().getPremiumPackages(completionHandler: handlePremiumPackages)
        
        self.symbols = Dataholder.allTickers
    }
    
    private func handlePremiumPackages(_ premiumPackages:[PremiumPackage]){
        DispatchQueue.main.async {
            for package in premiumPackages {
                if package.enabled != nil && !package.enabled! {
                    continue
                }
                var packageWrapper = PremiumDataWrapper()
                packageWrapper.package = package
                
                switch package.id {
                case Constants.premiumPackageIds.PREMIUM_BRAIN_LANGUAGE_METRICS_ALL:
                    packageWrapper.description = "The BrainCompany's Language Metrics monitors language used in a company's most recent financial filings to create a score that quantifies the sentiment in several different language domains. This score can help you take advantage of market inefficiencies that arise in response to company filings."
                    packageWrapper.promoImageName = "bc_language"
                    packageWrapper.logoImageName = "brain_logo_white"
                    break
                case Constants.premiumPackageIds.PREMIUM_BRAIN_RANKING_21_DAYS:
                    packageWrapper.description = "The BrainCompany's machine learning platform generates a prediction of the future returns of a stock over the next 21 days. The model implements a voting scheme of classifiers that aim to mitigate overfitting with low signal to noise ratio."
                    packageWrapper.promoImageName = "ai1"
                    packageWrapper.logoImageName = "brain_logo_white"
                    break
                case Constants.premiumPackageIds.PREMIUM_BRAIN_SENTIMENT_30_DAYS:
                    packageWrapper.description = "The BrainCompany's Sentiment Indicator monitors stock sentiment from the last 30 days of public financial news and computes a daily score based on a combination of natural language processing techniques."
                    packageWrapper.promoImageName = "bc_sentiment"
                    packageWrapper.logoImageName = "brain_logo_white"
                    break
                case Constants.premiumPackageIds.PREMIUM_KAVOUT_KSCORE:
                    packageWrapper.description = "Kavout is a predictive stock rating that applies advanced financial engineering methods to over 200 factors to rank stocks based on their probability of outperforming the market."
                    packageWrapper.promoImageName = "kavout_promo"
                    packageWrapper.logoImageName = "Kavout_logo"
                    break
                case Constants.premiumPackageIds.STOCKTWITS_SENTIMENT:
                    packageWrapper.description = "This Social Sentiment Indicator is a metric generated by the popular stock social media community StockTwits. Users of the community add sentiment to their comments about specific stocks which are used to compute a sentiment score."
                    packageWrapper.promoImageName = "ai2"
                    packageWrapper.logoImageName = "stocktwits_logo"
                    break
                case Constants.premiumPackageIds.PREMIUM_PRECISION_ALPHA_PRICE_DYNAMICS:
                    packageWrapper.description = "Precision Apha performs market analysis on six months of price data for NASDAQ and NYSE equities. Machine Learning techniques are used to scientifically quantify multi-factor market dynamics for each stock."
                    packageWrapper.promoImageName = "stockmarket3"
                    packageWrapper.logoImageName = "precision_alpha"
                    break
                case Constants.premiumPackageIds.EXTRACT_ALPHA_CROSS_ASSET_MODEL:
                    packageWrapper.description = "ExtractAlpha's Cross Asset Model captures information in the options market prices and volumes to compute a score that attempts to predicts which stocks will outperform the market in the near future."
                    packageWrapper.promoImageName = "stockmarket4"
                    packageWrapper.logoImageName = "extract_alpha_logo"
                    break
                case Constants.premiumPackageIds.EXTRACT_ALPHA_TACTICAL_MODEL:
                    packageWrapper.description = "ExtractAlpha's Tactical Model analyzes technical (price action) dynamics over the past 10 trading days to predict which stocks will outperform the market in the near term."
                    packageWrapper.promoImageName = "ai3"
                    packageWrapper.logoImageName = "extract_alpha_logo"
                    break
                case Constants.premiumPackageIds.TOP_ANALYSTS_SCORES:
                    continue
                case .none:
                    break
                case .some(_):
                    break
                }
                self.data.append(packageWrapper)
            }
            self.data = self.data.sorted(by: { a, b in
                (a.package?.name ?? "") < (b.package?.name ?? "")
            })
            self.tableView.reloadData()
            self.loader.stopAnimating()
        }
    }
    
    private func handlePremiumData(_ premiumData:[String:PremiumDataBase?]) {
        for (id, data):(String, PremiumDataBase?) in premiumData {
            if let data = data {
                let datestring = self.getPurchaseDateFromPremiumData(data, id: id)
                for i in 0..<self.data.count {
                    var item = self.data[i]
                    if item.package?.id == id {
                        item.purchaseDate = datestring
                    }
                    self.data[i] = item
                }
            }
        }
        DispatchQueue.main.async {
            self.tableView.reloadData()
            self.tableView.isHidden = false
            self.loader.stopAnimating()
        }
    }
    
    public func buyUpdateAction(_ premiumPackage:PremiumPackage){
        self.loader.startAnimating()
        NetworkManager.getMyRestApi().buyPremiumPackage(symbol: self.company!.symbol, packageId: premiumPackage.id!) {
            premiumData, newCredits, error in
            if let error = error, let credits = newCredits {
                DispatchQueue.main.async {
                    self.loader.stopAnimating()
                    self.showErrorAlert(error, credits: credits)
                }
                return
            }
            if premiumData == nil {
                DispatchQueue.main.async {
                    self.loader.stopAnimating()
                    self.showErrorAlert("error fetching data", credits: newCredits!)
                }
                return
            }
            Dataholder.updateCreditBalance(newCredits ?? 0)
            let datestring = self.getPurchaseDateFromPremiumData(premiumData, id: premiumPackage.id!)
            for i in 0..<self.data.count {
                var item = self.data[i]
                if item.package?.id == premiumPackage.id! {
                    item.purchaseDate = datestring
                }
                self.data[i] = item
            }
            DispatchQueue.main.async {
                self.loader.stopAnimating()
                self.tableView.reloadData()
            }
        }
    }
    
    func getPurchaseDateFromPremiumData(_ data:PremiumDataBase?, id:String) -> String{
        var datestring:String = ""
        if let data = data {
            switch id {
            case Constants.premiumPackageIds.PREMIUM_BRAIN_LANGUAGE_METRICS_ALL:
                datestring = (data as? BrainLanguage)?.subkey ?? ""
                break
            case Constants.premiumPackageIds.PREMIUM_KAVOUT_KSCORE:
                datestring = (data as? Kscore)?.subkey ?? ""
                break
            case Constants.premiumPackageIds.PREMIUM_BRAIN_RANKING_21_DAYS:
                datestring = (data as? Brain21DayRanking)?.subkey ?? ""
                break
            case Constants.premiumPackageIds.PREMIUM_BRAIN_SENTIMENT_30_DAYS:
                datestring = (data as? BrainSentiment)?.subkey ?? ""
                break
            case Constants.premiumPackageIds.STOCKTWITS_SENTIMENT:
                datestring = (data as? StocktwitsSentiment)?.id ?? ""
                break
            case Constants.premiumPackageIds.PREMIUM_PRECISION_ALPHA_PRICE_DYNAMICS:
                datestring = (data as? PrecisionAlphaDynamics)?.subkey ?? ""
                break
            case Constants.premiumPackageIds.EXTRACT_ALPHA_CROSS_ASSET_MODEL:
                datestring = (data as? CrossAsset)?.subkey ?? ""
                break
            case Constants.premiumPackageIds.EXTRACT_ALPHA_TACTICAL_MODEL:
                datestring = (data as? TacticalModel)?.subkey ?? ""
                break
            default:
                break
            }
        }
        return datestring
    }
    
    func creditBalanceUpdated() {
        DispatchQueue.main.async {
            self.creditBalance.credits.text = String(Dataholder.getCreditBalance())
        }
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        if tableView.restorationIdentifier == "premiumDataSymbolSearchTable" {
            return 1
        }
        return self.data.count
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if tableView.restorationIdentifier == "premiumDataSymbolSearchTable" {
            return searchResults.count
        }
        return 1
    }
    
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        if tableView.restorationIdentifier == "premiumDataSymbolSearchTable" {
            return 0.0
        }
        return 5.0
     }
     
     func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
         let headerView = UIView()
         headerView.backgroundColor = UIColor.clear
         return headerView
     }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        if tableView.restorationIdentifier == "premiumDataSymbolSearchTable" {
            if searchResults.count > indexPath.row {
                let item = searchResults[indexPath.row]
                let cell = tableView.dequeueReusableCell(withIdentifier: "searchSymbolTVC") as! CompanySearchTableViewCell
                cell.symbol.text = item.symbol
                cell.companyName.text = item.fullName
                cell.backgroundColor = .clear
                return cell
            } else {
                return UITableViewCell()
            }
        }
        
        let cell = tableView.dequeueReusableCell(withIdentifier: "premiumTVC") as! PremiumDataTableViewCell
        let item = self.data[indexPath.section]
        cell.promoImage.image = UIImage(named: item.promoImageName!)
        cell.logo.image = UIImage(named: item.logoImageName!)
        cell.dataTitle.text = item.package?.name ?? "unknown"
        cell.dataDescription.text = item.description ?? "unknown"
        if item.purchaseDate == nil || item.purchaseDate!.isEmpty {
            cell.purchasedContainer.isHidden = true
        } else {
            cell.purchasedContainer.isHidden = false
            cell.purchasedDate.text = item.purchaseDate ?? "-"
        }
        cell.costLabel.credits.text = String(item.package?.credits! ?? 0)
        cell.costLabel.delegate = self
        cell.costLabel.premiumPackage = item.package
        cell.costLabel.bgColor = Constants.themeDarkBlue
        cell.costLabel.containerView.layer.borderWidth = 1.0
        cell.costLabel.containerView.layer.borderColor = UIColor.white.cgColor
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if tableView.restorationIdentifier == "premiumDataSymbolSearchTable" {
            let item = self.searchResults[indexPath.row]
            self.company = item
            self.searchResults = []
            self.symbolsTableView.isHidden = true
            self.selectAStock.isHidden = true
            self.searchbar.resignFirstResponder()
            self.goToSymbolButton.isHidden = false
            self.goToSymbolButton.setTitle("VIEW DATA FOR \(self.company!.symbol) ", for: .normal)
            //gets the saved premium data
            self.loader.startAnimating()
            
            
            for i in 0..<self.data.count {
                var item = self.data[i]
                item.purchaseDate = ""
                self.data[i] = item
            }
            
            NetworkManager.getMyRestApi().getPremiumData(symbol: self.company!.symbol, completionHandler: handlePremiumData)
        } else {
            let item = self.data[indexPath.section]
            if item.package != nil {
                self.shadowButtonTapped(item.package!)
            }
        }
    }
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        filterList(searchText: searchText.uppercased())
        self.symbolsTableView.reloadData()
    }
    func searchBarCancelButtonClicked(_ searchBar: UISearchBar) {
        self.dismiss(animated: true, completion: nil)
    }
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        self.searchbar.resignFirstResponder()
    }
    
    private func filterList(searchText: String){
        if searchText == "" {
            searchResults = []
        } else {
            searchResults = Dataholder.allTickers.filter {
                $0.symbol.lowercased().starts(with: searchText.lowercased()) ||
                $0.fullName.lowercased().starts(with: searchText.lowercased())
            }
        }
        DispatchQueue.main.async {
            if self.searchResults.count > 0 {
                self.symbolsTableView.isHidden = false
                self.tableView.isHidden = true
                self.selectAStock.isHidden = true
            } else {
                self.symbolsTableView.isHidden = true
                if self.company != nil {
                    self.tableView.isHidden = false
                }
            }
        }
    }
    
    public func loadingStarted(){
        DispatchQueue.main.async {
            self.loader.startAnimating()
        }
    }
    public func loadingFinished(){
        DispatchQueue.main.async {
            self.loader.stopAnimating()
        }
    }
    
    public func shadowButtonTapped(_ premiumPackage:PremiumPackage?){
        if premiumPackage != nil {
            if premiumPackage!.credits ?? 0 > Dataholder.getCreditBalance() {
                self.showPurchaseController()
            } else {
                self.showInfoAlert(premiumPackage!)
            }
        } else {
            self.showPurchaseController()
        }
    }
    
    private func showPurchaseController(){
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
        let purchaseVC = storyboard.instantiateViewController(withIdentifier: "purchaseCreditsVC") as! PurchaseViewController
        self.present(purchaseVC, animated: true, completion: nil)
    }
    
    func showInfoAlert(_ package:PremiumPackage){
        let message = "You are about to use " + String(package.credits!) + " credits to get " + package.name! + " data for " + company!.fullName + ". If you have already received this data recently, new data might not meaningfully differ from what you already have, depending on market conditions."
        let alert = FCAlertView()
        alert.doneActionBlock {
            self.buyUpdateAction(package)
        }
        alert.alertBackgroundColor = Constants.themePurple
        alert.titleColor = .white
        alert.subTitleColor = .white
        alert.colorScheme = Constants.lightPurple
        alert.doneButtonTitleColor = .white
        alert.secondButtonTitleColor = .darkGray
        alert.firstButtonTitleColor = .darkGray
        alert.dismissOnOutsideTouch = true
        alert.detachButtons = true
        alert.showAlert(inView: self,
                        withTitle: "Premium Data",
                        withSubtitle: message,
                        withCustomImage: UIImage(named: "coin_bw.png"),
                        withDoneButtonTitle: "Use",
                        andButtons: ["Cancel"])
    }
    
    func showHelpAlert(_ message:String){
        let alert = FCAlertView()
        alert.doneActionBlock {
            //print()
        }
        alert.alertBackgroundColor = Constants.themePurple
        alert.titleColor = .white
        alert.subTitleColor = .white
        alert.colorScheme = Constants.lightPurple
        alert.doneButtonTitleColor = .white
        alert.secondButtonTitleColor = .darkGray
        alert.firstButtonTitleColor = .darkGray
        alert.dismissOnOutsideTouch = true
        alert.detachButtons = true
        alert.showAlert(inView: self,
                        withTitle: title,
                        withSubtitle: message,
                        withCustomImage: UIImage(systemName: "questionmark.circle"),
                        withDoneButtonTitle: "Ok",
                        andButtons: [])
    }
    
    func showErrorAlert(_ error:String, credits:Int){
        let message = String("\(error) No credits were used and your balance remains at \(credits).")
        let alert = FCAlertView()
        alert.alertBackgroundColor = Constants.themePurple
        alert.titleColor = .white
        alert.subTitleColor = .white
        alert.doneButtonTitleColor = .white
        alert.secondButtonTitleColor = .darkGray
        alert.firstButtonTitleColor = .darkGray
        alert.colorScheme = Constants.darkPink
        alert.dismissOnOutsideTouch = true
        alert.detachButtons = true
        alert.showAlert(inView: self,
                        withTitle: "Error",
                        withSubtitle: message,
                        withCustomImage: UIImage(systemName: "exclamationmark.triangle.fill"),
                        withDoneButtonTitle: "Ok", andButtons: nil)
    }
    
    @IBAction func helpAction(_ sender: Any) {
        self.showHelpAlert("Search for and select a stock, then tap any premium data item to exchange credits for the data. If the data exists, it will be immediately available on the details screen for the stock. You can then tap the 'VIEW DATA FOR...' button to be taken directly to the premium data section.")
    }
    
    // MARK: - Navigation

    // In a storyboard-based application, you will often want to do a little preparation before navigation
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let dest = segue.destination as? StockDetailsVC {
            Dataholder.selectedCompany = self.company
            dest.goToPremium = true
        }
    }
    

}
